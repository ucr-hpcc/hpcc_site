<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HPCC â€“ Selected Research Software Usage</title><link>https://hpcc.ucr.edu/manuals/hpc_cluster/selected_software/</link><description>Recent content in Selected Research Software Usage on HPCC</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://hpcc.ucr.edu/manuals/hpc_cluster/selected_software/index.xml" rel="self" type="application/rss+xml"/><item><title>Manuals: AlphaFold Usage on HPCC</title><link>https://hpcc.ucr.edu/manuals/hpc_cluster/selected_software/alphafold/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hpcc.ucr.edu/manuals/hpc_cluster/selected_software/alphafold/</guid><description>
&lt;h2 id="alphafold2">AlphaFold2&lt;/h2>
&lt;p>Description of AlphaFold2&lt;/p>
&lt;h3 id="loading-the-module">Loading the module&lt;/h3>
&lt;p>You can load AlphaFold2 using the following commands:&lt;/p>
&lt;pre>&lt;code class="language-bash">module load alphafold/
singularity shell $ALPHAFOLD_SING
&lt;/code>&lt;/pre>
&lt;p>You can also run AlphaFold2 with a gpu. If you wish to use a GPU, &lt;a href="https://hpcc.ucr.edu/manuals/hpc_cluster/jobs/#gpu-jobs">log into a P100 gpu node&lt;/a> and then use the following commands:&lt;/p>
&lt;pre>&lt;code class="language-bash">module load alphafold/
singularity shell --nv $ALPHAFOLD_SING
&lt;/code>&lt;/pre>
&lt;h3 id="using-alphafold-databases">Using Alphafold Databases&lt;/h3>
&lt;p>When running the alphafold command, you will be asked for certain databases. These databases can be found under the path $DATABASE_DIR/alphafold/&lt;version>. They can also be accessed using the &lt;code>$$ALPHAFOLD_DB&lt;/code> environment variable that is automatically set after loading the alphafold module.&lt;/p>
&lt;p>Here is an example of how to write your alphafold command using the monomer preset:&lt;/p>
&lt;pre>&lt;code class="language-bash">python3 /app/alphafold/run_alphafold.py \
--model_preset=monomer \
--db_preset=reduced_dbs \
--use_gpu_relax=True \
--data_dir=$DATABASES_DIR/alphafold/2.1.2 \
--uniref90_database_path=$DATABASES_DIR/alphafold/2.1.2/uniref90/uniref90.fasta \
--mgnify_database_path=$DATABASES_DIR/alphafold/2.1.2/mgnify/mgy_clusters_2018_12.fa \
--template_mmcif_dir=$DATABASES_DIR/alphafold/2.1.2/pdb_mmcif/mmcif_files \
--max_template_date=2020-05-14 \
--obsolete_pdbs_path=$DATABASES_DIR/alphafold/2.1.2/pdb_mmcif/obsolete.dat \
--pdb_seqres_database_path=$ALPHAFOLD_DB/pdb_seqres/pdb_seqres \
--uniprot_database_path=$ALPHAFOLD_DB/uniprot/uniprot.fasta \
--small_bfd_database_path=$DATABASES_DIR/alphafold/2.1.2/small_bfd/bfd-first_non_consensus_sequences.fasta \
--pdb70_database_path=$DATABASES_DIR/alphafold/2.1.2/pdb70/pdb70 \
--fasta_paths=&amp;lt;path to fasta file here&amp;gt; \
--output_dir=&amp;lt;path to output directory&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>and an example using the multimer preset:&lt;/p>
&lt;pre>&lt;code class="language-bash">python3 /app/alphafold/run_alphafold.py \
--model_preset=multimer \
--db_preset=reduced_dbs \
--use_gpu_relax=True \
--data_dir=$DATABASES_DIR/alphafold/2.1.2 \
--uniref90_database_path=$DATABASES_DIR/alphafold/2.1.2/uniref90/uniref90.fasta \
--mgnify_database_path=$DATABASES_DIR/alphafold/2.1.2/mgnify/mgy_clusters_2018_12.fa \
--template_mmcif_dir=$DATABASES_DIR/alphafold/2.1.2/pdb_mmcif/mmcif_files \
--max_template_date=2020-05-14 \
--obsolete_pdbs_path=$DATABASES_DIR/alphafold/2.1.2/pdb_mmcif/obsolete.dat \
--small_bfd_database_path=$DATABASES_DIR/alphafold/2.1.2/small_bfd/bfd-first_non_consensus_sequences.fasta \
--uniprot_database_path=$ALPHAFOLD_DB/uniprot/uniprot.fasta \
--pdb_seqres_database_path=$ALPHAFOLD_DB/pdb_seqres \
--fasta_paths=&amp;lt;path to fasta file&amp;gt; \
--output_dir=&amp;lt;path to output directory&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>Remember to fill in your fasta path and output dir if you wish to use these templates.&lt;/p>
&lt;p>Additionally, these are not the only two methods of running AlphaFold, and different modes might require different sets of arguments to be passed to &lt;code>alphafold.py&lt;/code>. For more details regarding what parameters are available, as well as more examples, please refer to the &lt;a href="https://github.com/deepmind/alphafold">Alphafold Github Repo&lt;/a>.&lt;/p></description></item><item><title>Manuals: VSCode Usage on HPCC</title><link>https://hpcc.ucr.edu/manuals/hpc_cluster/selected_software/vscode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hpcc.ucr.edu/manuals/hpc_cluster/selected_software/vscode/</guid><description>
&lt;h2 id="using-vscode-on-the-cluster">Using VSCode on the Cluster&lt;/h2>
&lt;p>VSCode is a code editor that can run locally on your computer, or while connected to the cluster.&lt;/p>
&lt;p>When using VSCode on the cluster, please attempt to not use Remote SSH, as it will launch the code server on a head node, possibly creating resource conflicts if many users are doing it at once.&lt;/p>
&lt;p>Instead, we can use a feature of VSCode: tunnels.&lt;/p>
&lt;h2 id="setting-up-vscode-tunnels">Setting up VSCode Tunnels&lt;/h2>
&lt;p>Using a tunnel allows us to work on a compute node, rather than on a head node. This allows us to use more resources than we would normally be allowed to on a head node.&lt;/p>
&lt;h3 id="installing-the-remote-tunnels-extension">Installing the Remote Tunnels extension&lt;/h3>
&lt;p>On your local machine, install the &amp;ldquo;Remote - Tunnels&amp;rdquo; extension.&lt;/p>
&lt;p>&lt;img src="../../../img/vscode-ext-install.png" alt="vscodeinstall">&lt;/p>
&lt;h3 id="starting-vscode-tunnel-on-the-cluster">Starting VSCode Tunnel on the Cluster&lt;/h3>
&lt;p>Create an interactive session using srun&lt;/p>
&lt;pre>&lt;code class="language-sh">srun -p batch -t 5:00:00 --pty -c 4 --mem=4g bash -l # Customize as needed
&lt;/code>&lt;/pre>
&lt;p>Load the VSCode module and start the tunnel&lt;/p>
&lt;pre>&lt;code class="language-sh">module load vscode
code tunnel
&lt;/code>&lt;/pre>
&lt;p>The program will provide you with a code and ask you to verify on GitHub.com. Follow the steps for authorization.
Once you get to the &amp;ldquo;Congratulations, you&amp;rsquo;re all set!&amp;rdquo; page, the terminal will update with a new line asking you to open another link.
At this point you have 2 ways to access: via a web browser, or using the extension that we previously installed. Make sure that you keep
the server running in the background, as it is what allows the connection to occur.&lt;/p>
&lt;h3 id="using-a-web-browser">Using A Web Browser&lt;/h3>
&lt;p>After authorizing VSCode, you can use the link given to access your session. The URL should be similar to &lt;code>https://vscode.dev/tunnel/...&lt;/code>.
The environment is very similar to the desktop program, though some features might be missing.&lt;/p>
&lt;h3 id="using-the-vscode-extension">Using the VSCode Extension&lt;/h3>
&lt;p>After install the &amp;ldquo;Remote - Tunnels&amp;rdquo; extension on your local machine, connect to the Tunnel session that was previously created using the green &amp;ldquo;&amp;gt;&amp;lt;&amp;rdquo;
icon in the bottom left of VSCode. Select the &amp;ldquo;Connect to Tunnel&amp;hellip;&amp;rdquo; option, then select the tunnel we created earlier.&lt;/p>
&lt;p>&lt;img src="../../../img/vscode-tunnel1.png" alt="vscodeinstall">&lt;/p>
&lt;p>&lt;img src="../../../img/vscode-tunnel2.png" alt="vscodeinstall">&lt;/p>
&lt;p>After VSCode connects, you should be able to open Files and Folders on the cluster as if it were your local machine.&lt;/p>
&lt;h3 id="cleaning-up">Cleaning Up&lt;/h3>
&lt;p>Once you have finished, make sure to close VSCode (locally or using your web browser). Then stop the Tunnel from running on the cluster using &lt;code>Ctrl+C&lt;/code>.
Once the program had been stopped, you can exit out of the interactive srun session and close your terminal.&lt;/p></description></item></channel></rss>